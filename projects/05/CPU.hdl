// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //判断是A指令还是C指令
    Not(in = instruction[15], out = AI);
    And(a = instruction[15], b = true, out = CI);

    //从D寄存器获取值outDR
    And(a = CI, b = instruction[4], out = loadD);
    DRegister(in = outALU, load = loadD, out = outDR);

    //1、如果是A指令，加载instruction到A寄存器；2、如果是C指令，获取值outAR
    And(a = CI, b = instruction[5], out = CLoadA);
    Or(a = AI, b = CLoadA, out = loadA);
    Mux16(a = outALU, b = instruction, sel = AI, out = inALU);
    ARegister(in = inALU, load = loadA, out = outAR, out[0..14] = addressM);

    //选择A寄存器的值或RAM[M]的是到ALU
    Mux16(a = outAR, b = inM, sel = instruction[12], out = outMAR);

    And(a = CI, b = instruction[11], out = zx);
    And(a = CI, b = instruction[10], out = nx);
    And(a = CI, b = instruction[9], out = zy);
    And(a = CI, b = instruction[8], out = ny);
    And(a = CI, b = instruction[7], out = f);
    And(a = CI, b = instruction[6], out = no);

    ALU(x = outDR, y = outMAR, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no, out = outALU, out = outM, zr = zr, ng = ng);

    //是否将结果写回RAM[M]
    And(a = CI, b = instruction[3], out = writeM);

    //判断跳转位
    And(a = CI, b = instruction[0], out = GT);
    And(a = CI, b = instruction[1], out = EQ);
    And(a = CI, b = instruction[2], out = LT);

    And(a = ng, b = LT, out = LTJump);
    And(a = zr, b = EQ, out = EQJump);

    Or(a = ng, b = zr, out = isPo);
    Not(in = isPo, out = po);
    And(a = po, b = GT, out = GTJump);

    Or(a = LTJump, b = EQJump, out = j1);
    Or(a = j1, b = GTJump, out = jump);

    PC(in = outAR, load = jump, inc = true, reset = reset, out[0..14] = pc);
    
}